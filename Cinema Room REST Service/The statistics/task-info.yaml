type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/TicketToReturn.java
  visible: true
  text: |
    package cinema;

    public class TicketToReturn {
        private RowsAndColumns returnedTicket;

        public RowsAndColumns getReturnedTicket() {
            return returnedTicket;
        }

        public void setReturnedTicket(RowsAndColumns returnedTicket) {
            this.returnedTicket = returnedTicket;
        }
        public TicketToReturn() {

        }

        public TicketToReturn(RowsAndColumns returnedTicket) {
            this.returnedTicket = returnedTicket;
        }
    }
  learner_created: true
- name: src/cinema/ErrorHandling/InvalidToken.java
  visible: true
  text: |
    package cinema.ErrorHandling;

    public class InvalidToken extends RuntimeException{
        public InvalidToken() {
        }

        public InvalidToken(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/CinemaRoomController.java
  visible: true
  text: |
    package cinema;

    import cinema.ErrorHandling.InvalidToken;
    import cinema.ErrorHandling.OutOfBoundsError;
    import cinema.ErrorHandling.SeatAlreadyBooked;
    import com.google.gson.Gson;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.*;

    import java.util.Arrays;
    import java.util.UUID;

    @RestController
    public class CinemaRoomController {
        Gson gson = new Gson();
        @Autowired
        CinemaRoom cinemaRoom;
        @Autowired
        RowsAndColumns rowsAndColumns;


        @GetMapping("/seats")
        public CinemaRoom cinemaRoomData() {
            //cinemaRoom.populateSeatList();
            return cinemaRoom;
        }


        private TicketWithToken validateSeat(PickedSeat pickedSeat) {
            TicketWithToken ticketWithToken = null;
            RowsAndColumns seatToBook = null;
            if ((pickedSeat.getRow() < 0) || (pickedSeat.getColumn() < 0) || (pickedSeat.getRow() > 9) || (pickedSeat.getColumn() > 9)) {
                throw new OutOfBoundsError("etc");
            } else {
                for (int i = 0; i < cinemaRoom.getAvailableSeats().size(); i ++) {
                    rowsAndColumns = cinemaRoom.getAvailableSeats().get(i);
                    if ((rowsAndColumns.getRow() == pickedSeat.getRow()) && (rowsAndColumns.getColumn() == pickedSeat.getColumn() )){
                        if (rowsAndColumns.isBooked()) {
                            throw new SeatAlreadyBooked("etc");
                        } else {
                            rowsAndColumns.setBooked(true);
                            seatToBook = rowsAndColumns;
                            UUID token = UUID.randomUUID();
                            ticketWithToken = new TicketWithToken(token, seatToBook);
                            cinemaRoom.getTicketWithTokenList().add(ticketWithToken);
                        }
                    }
                }
            }

            return  ticketWithToken;
        }

        @PostMapping("/purchase")
        public TicketWithToken bookSeats(@RequestBody PickedSeat pickedSeat) {

            return validateSeat(pickedSeat);
        }


        private TicketToReturn returnTicket(TicketWithToken token) {
            TicketToReturn returnedTicket = null;
            boolean tokenExists = false;
            for (int i = 0; i < cinemaRoom.getTicketWithTokenList().size(); i++) {

                UUID compare = cinemaRoom.getTicketWithTokenList().get(i).getToken();
                UUID input = token.getToken();
                if (input.equals(compare)){
                    returnedTicket = new TicketToReturn(cinemaRoom.getTicketWithTokenList().get(i).getTicket());
                    cinemaRoom.getAvailableSeats().get(i).setBooked(false);
                    tokenExists = true;
                    break;
                }

            }
            if (!tokenExists) {
                throw new InvalidToken();
            }
            return returnedTicket;
        }

        @PostMapping("/return")
        public TicketToReturn returnTicketEndPoint(@RequestBody TicketWithToken token){

            return returnTicket(token);
        }

    }
  learner_created: true
- name: src/cinema/PickedSeat.java
  visible: true
  text: |
    package cinema;

    import org.springframework.stereotype.Component;

    @Component
    public class PickedSeat {
        private int row;
        private int column;

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/ErrorHandling/OutOfBoundsError.java
  visible: true
  text: |
    package cinema.ErrorHandling;

    public class OutOfBoundsError extends RuntimeException{
        public OutOfBoundsError(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/ErrorHandling/SeatAlreadyBooked.java
  visible: true
  text: |
    package cinema.ErrorHandling;

    public class SeatAlreadyBooked extends RuntimeException{
        public SeatAlreadyBooked(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/ErrorHandling/CustomExceptionsHandler.java
  visible: true
  text: |
    package cinema.ErrorHandling;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    import java.util.HashMap;
    import java.util.Map;

    @ControllerAdvice
    public class CustomExceptionsHandler {

        @ExceptionHandler(OutOfBoundsError.class)
        public ResponseEntity<Object> handleOutOfBoundsException() {
            ApiOutOfBounds apiOutOfBounds = new ApiOutOfBounds(HttpStatus.BAD_REQUEST.value(), "The number of a row or a column is out of bounds!");
            return new ResponseEntity<>(apiOutOfBounds, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(SeatAlreadyBooked.class)
        public ResponseEntity<Object> handleSeatAlreadyBooked(){
            ApiOutOfBounds seatBooked = new ApiOutOfBounds(HttpStatus.BAD_REQUEST.value(), "The ticket has been already purchased!");
            return new ResponseEntity<>(seatBooked, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(InvalidToken.class)
        public ResponseEntity<Object> handleWrongToken(){
            ApiOutOfBounds invalidToken = new ApiOutOfBounds(HttpStatus.BAD_REQUEST.value(), "Wrong token!");
            return new ResponseEntity<>(invalidToken, HttpStatus.BAD_REQUEST);
        }


    }
  learner_created: true
- name: src/cinema/CinemaRoom.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    import java.util.*;

    @Component
    public class CinemaRoom {

        public final int totalRows = 9;
        public final int totalColumns = 9;
        private final List<RowsAndColumns> availableSeats = new ArrayList<>();
        private List<TicketWithToken> ticketWithTokenList = new ArrayList<>();
        @JsonIgnore
        protected List<TicketWithToken> getTicketWithTokenList() {
            return ticketWithTokenList;
        }

        public void setTicketWithTokenList(List<TicketWithToken> ticketWithTokenList) {
            this.ticketWithTokenList = ticketWithTokenList;
        }

        public List<RowsAndColumns> getAvailableSeats() {
            return availableSeats;
        }

        public CinemaRoom() {

            populateSeatList();
        }

        private void populateSeatList () {
            int price;
            for (int row = 0; row < totalRows; row++ ){
                for (int column = 0; column < totalColumns; column++) {
                    if (row < 4) {
                         price = 10;
                    } else {
                        price = 8;
                    }
                    availableSeats.add(new RowsAndColumns(row + 1, column + 1, price));
                }
            }
        }



    }
  learner_created: true
- name: src/cinema/ErrorHandling/ApiOutOfBounds.java
  visible: true
  text: |
    package cinema.ErrorHandling;

    import java.util.Map;

    public class ApiOutOfBounds {
        private int status;
        String error;

        public ApiOutOfBounds(int status, String error) {
            this.status = status;
            this.error = error;
        }

        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

    }
  learner_created: true
- name: src/cinema/TicketWithToken.java
  visible: true
  text: |
    package cinema;

    import io.micrometer.core.lang.Nullable;

    import java.util.UUID;

    public class TicketWithToken {
        private UUID token;

        public TicketWithToken() {
        }

        public TicketWithToken(UUID token) {
            this.token = token;
        }

        @Nullable
        private RowsAndColumns ticket;

        public UUID getToken() {
            return token;
        }

        public TicketWithToken(UUID token, RowsAndColumns ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public void setToken(UUID token) {
            this.token = token;
        }

        public RowsAndColumns getTicket() {
            return ticket;
        }

        public void setTicket(RowsAndColumns ticket) {
            this.ticket = ticket;
        }
    }
  learner_created: true
- name: src/cinema/CinemaStats.java
  visible: true
  text: "package cinema;\n\npublic class CinemaStats {\n    \n}\n"
  learner_created: true
- name: src/cinema/RowsAndColumns.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.stereotype.Component;

    @Component
    public class RowsAndColumns {
        private int row;
        private int column;

        private int price;

        private boolean isBooked = false;

        public RowsAndColumns() {
        }

        @JsonIgnore
        public boolean isBooked() {
            return isBooked;
        }

        public void setBooked(boolean booked) {
            isBooked = booked;
        }

        public RowsAndColumns(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/ErrorHandling/SecretPasswordError.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 29 Sep 2022 09:45:36 UTC
record: -1
